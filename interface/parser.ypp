/* ============================================================== */
/*                             C PRELUDE                          */
/* ============================================================== */


%{

#include "representation.h" // includes knit_parser

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <cstring>

#include <map>
#include <list>
#include <vector>


using namespace std;

int line_number	= 1;                         /* number of current source line */
map<string,pair< int,Element*> > piece_map;  /* map of the pieces */
extern int yylex();                          /* lexical analyzer generated from lex.l */
extern char *yytext;                         /* last token, defined in lex.l  */
string parseError;

void yyerror(char *s){
    string resume;
    const string yytb= yytext; //to concatenate next
    fprintf(stderr, "line %d: syntax error. Last token was \"%s\"\n", line_number, yytext);
    resume = "line " + to_string(line_number);
    resume += ": syntax error. Last token was " + yytb;
    resume += "\n" + to_string(*s);
    parseError = resume;
}

void error(char *s){
	fprintf(stderr, "line %d: error: %s\n", line_number, s);
}

%}

/* ============================================================== */
/*                     TYPES OF NON-TERMINALS                     */         
/* ============================================================== */


%union {
  int integer;
  char* name;
  Element* elt;
  Trapezoid* trapezoid;
  std::list<splitData>* pointer;
}


/* ============================================================== */
/*                       TOKENS DECLARATION
/* ============================================================== */

/* Types */
%token INT
%token NAME
%token DESCR

/* DÃ©limiteurs */
%token LPAREN RPAREN
%token LBRACE RBRACE

/* Pieces */
%token  PIECE DEF SEQ SEP COL

/* Entete */
%token H_NAME H_DESCR

/* Vocabulary */
%token START STOP TRAPEZOID LINK SPLIT

/* others */

%token END_OF_FILE
%right SEQ

/* associate the types */

%type<integer> INT
%type<integer> main body // Just a return value
%type<name> NAME DESCR

%type<trapezoid> trapezoid_params params
%type<elt> element
%type<pointer> split_body

/* Axiom */
%start main

%%

/* ============================================== */
/*            The grammar with actions            */
/* ============================================== */

main:
  H_NAME NAME H_DESCR DESCR body		 				{ knit_parsed = Knit($2,$4,piece_map); $$ = 0;}
| H_NAME NAME H_DESCR DESCR body END_OF_FILE			{ knit_parsed = Knit($2,$4,piece_map); $$ = 0;}
;

body:
  PIECE NAME DEF START INT SEQ element					{ piece_map.clear();
                                                          piece_map.insert(pair<string,pair<int, Element*> >($2,pair<int, Element*> ($5,$7)));
                                                          $$ = 0;}
| PIECE NAME DEF START INT SEQ element body             { piece_map.insert(pair<string,pair<int, Element*> >($2,pair<int, Element*> ($5,$7)));
                                                          $$ = $8;}
;

element:	
  STOP                                        			{ list<splitData>* ptr = nullptr; // null pointer
                                                          $$ = new Split(ptr);}
| LINK NAME	INT											{ $$ = new Link($2,$3);}
| SPLIT split_body                                  	{ $$ = new Split($2);}
| TRAPEZOID trapezoid_params SEQ element 				{ $$ = new TrapezoidElem(*($2),$4);}
;

split_body:
  /* Empty */                                           { list<splitData>* ptr = new list<splitData>; $$ = ptr;}
| split_body INT INT LBRACE element RBRACE              { (*$1).insert($1->begin(),splitData($2,$3,$5));
                                                          $$ = $1;}

trapezoid_params:
  LPAREN params RPAREN                    				{ $$ = $2;}
;

/* sorry for this ugly rule... */

params:
NAME COL INT SEP NAME COL INT SEP NAME COL INT SEP NAME COL NAME { $$ = new Trapezoid($3,$7,$11,$15);}
;


